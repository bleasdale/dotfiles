let s:cpo_save=&cpo
set cpo&vim
inoremap <C-ScrollWheelDown> :call AdjustFontSize(-1)a
inoremap <C-ScrollWheelUp> :call AdjustFontSize(1)a
inoremap <C-kMinus> :call AdjustFontSize(-1)a
inoremap <C-kPlus> :call AdjustFontSize(1)a
inoremap <silent> <C-R> <Cmd>lua require("which-key").show("\18", {mode = "i", auto = true})
cnoremap <silent> <C-R> <Cmd>lua require("which-key").show("\18", {mode = "c", auto = true})
cnoremap <silent> <Plug>(TelescopeFuzzyCommandSearch) e "lua require('telescope.builtin').command_history { default_text = [=[" . escape(getcmdline(), '"') . "]=] }"
noremap! <silent> <Plug>luasnip-expand-repeat <Cmd>lua require'luasnip'.expand_repeat()
noremap! <silent> <Plug>luasnip-delete-check <Cmd>lua require'luasnip'.unlink_current_if_deleted()
inoremap <silent> <Plug>luasnip-jump-prev <Cmd>lua require'luasnip'.jump(-1)
inoremap <silent> <Plug>luasnip-jump-next <Cmd>lua require'luasnip'.jump(1)
inoremap <silent> <Plug>luasnip-prev-choice <Cmd>lua require'luasnip'.change_choice(-1)
inoremap <silent> <Plug>luasnip-next-choice <Cmd>lua require'luasnip'.change_choice(1)
inoremap <silent> <Plug>luasnip-expand-snippet <Cmd>lua require'luasnip'.expand()
inoremap <silent> <Plug>luasnip-expand-or-jump <Cmd>lua require'luasnip'.expand_or_jump()
inoremap <silent> <C-Bslash> <Cmd>ToggleTerm
cnoremap <C-K> UP
cnoremap <C-L> RIGHT
cnoremap <C-J> DOWN
cnoremap <C-H> <Left>
inoremap <C-K> UP
inoremap <C-L> RIGHT
inoremap <C-J> DOWN
inoremap <C-H> <Left>
inoremap <silent> <C-T> <Cmd>exe v:count1 . "ToggleTerm"
inoremap <C-W> u
inoremap <C-U> u
smap <silent> <expr>  luasnip#choice_active() ? '<Plug>luasnip-next-choice' : ''
xnoremap <silent> 	 :lua require('luasnip.util.util').store_selection()gv"_s
vnoremap <silent> <NL> :m '>+1==gv=gv
nnoremap <silent> <NL> :m .+1==
vnoremap <silent>  :m '<-2==gv=gv
nnoremap <silent>  :m .-2==
nnoremap  <Cmd>nohlsearch|diffupdate|normal! 
nnoremap <silent>  <Cmd>exe v:count1 . "ToggleTerm"
nnoremap <silent> √û <Nop>
nnoremap <silent>  <Cmd>lua require("which-key").show("\23", {mode = "n", auto = true})
tnoremap  
nnoremap <silent>  <Cmd>execute v:count . "ToggleTerm"
nnoremap <silent>  s√û <Nop>
nnoremap <silent>  b√û <Nop>
nnoremap <silent>  f√û <Nop>
nnoremap <silent>  c√û <Nop>
nnoremap <silent>  t√û <Nop>
nnoremap <silent>  z√û <Nop>
nnoremap <silent>  e√û <Nop>
nnoremap <silent>  √û <Nop>
nnoremap <silent>   <Cmd>lua require("which-key").show(" ", {mode = "n", auto = true})
nnoremap  lg :LazyGit
nnoremap  9 9gt
nnoremap  8 8gt
nnoremap  7 7gt
nnoremap  6 6gt
nnoremap  5 5gt
nnoremap  4 4gt
nnoremap  3 3gt
nnoremap  2 2gt
nnoremap  1 1gt
nnoremap  tp :tabprevious
nnoremap  tn :tabnext
nnoremap  tc :tabclose
nnoremap  tN :tabnew
nnoremap <silent>   :noh
nnoremap <silent>  zbb <Cmd>lua buf_kill(0, true)
nnoremap <silent>  zb <Cmd>lua buf_kill(0)
nnoremap  p :bp
nnoremap  n :bn
nnoremap  bn <Cmd>enew
nnoremap  k :wincmd k
nnoremap  l :wincmd l
nnoremap  j :wincmd j
nnoremap  h :wincmd h
nnoremap <silent>  <Left> :vertical resize -5
nnoremap <silent>  <Right> :vertical resize +5
nnoremap <silent>  <Down> :resize -5
nnoremap <silent>  <Up> :resize +5
nnoremap  cd :lcd %:h
nnoremap  u :PackerSync
nnoremap <silent>  ev :vsplit ~/.config/nvim/init.lua
nnoremap <silent>  sv :so ~/.config/nvim/init.lua
nnoremap <silent> !a√û <Nop>
nnoremap <silent> !i√û <Nop>
nnoremap <silent> !√û <Nop>
nnoremap <silent> ! <Cmd>lua require("which-key").show("!", {mode = "n", auto = true})
nnoremap <silent> " <Cmd>lua require("which-key").show("\"", {mode = "n", auto = true})
xnoremap <silent> " <Cmd>lua require("which-key").show("\"", {mode = "v", auto = true})
xnoremap # y?\V"
omap <silent> % <Plug>(MatchitOperationForward)
xmap <silent> % <Plug>(MatchitVisualForward)
nmap <silent> % <Plug>(MatchitNormalForward)
nnoremap & :&&
nnoremap <silent> ' <Cmd>lua require("which-key").show("'", {mode = "n", auto = true})
xnoremap * y/\V"
nnoremap : ;
nnoremap ; :
nnoremap <silent> <a√û <Nop>
nnoremap <silent> <i√û <Nop>
nnoremap <silent> <√û <Nop>
nnoremap <silent> < <Cmd>lua require("which-key").show("<", {mode = "n", auto = true})
nnoremap <silent> >a√û <Nop>
nnoremap <silent> >i√û <Nop>
nnoremap <silent> >√û <Nop>
nnoremap <silent> > <Cmd>lua require("which-key").show(">", {mode = "n", auto = true})
nnoremap <silent> @√û <Nop>
nnoremap <silent> @ <Cmd>lua require("which-key").show("@", {mode = "n", auto = true})
nnoremap Y y$
nnoremap <silent> [√û <Nop>
nnoremap <silent> [ <Cmd>lua require("which-key").show("[", {mode = "n", auto = true})
xnoremap <silent> [√û <Nop>
xnoremap <silent> [ <Cmd>lua require("which-key").show("[", {mode = "v", auto = true})
omap <silent> [% <Plug>(MatchitOperationMultiBackward)
xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
nnoremap \ :Neotree reveal
nnoremap <silent> ]√û <Nop>
nnoremap <silent> ] <Cmd>lua require("which-key").show("]", {mode = "n", auto = true})
xnoremap <silent> ]√û <Nop>
xnoremap <silent> ] <Cmd>lua require("which-key").show("]", {mode = "v", auto = true})
omap <silent> ]% <Plug>(MatchitOperationMultiForward)
xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
nnoremap <silent> ` <Cmd>lua require("which-key").show("`", {mode = "n", auto = true})
xnoremap <silent> a√û <Nop>
xnoremap <silent> a <Cmd>lua require("which-key").show("a", {mode = "v", auto = true})
xmap a% <Plug>(MatchitVisualTextObject)
nnoremap <silent> ca√û <Nop>
nnoremap <silent> ci√û <Nop>
nnoremap <silent> c√û <Nop>
nnoremap <silent> c <Cmd>lua require("which-key").show("c", {mode = "n", auto = true})
nnoremap <silent> da√û <Nop>
nnoremap <silent> di√û <Nop>
nnoremap <silent> d√û <Nop>
nnoremap <silent> d <Cmd>lua require("which-key").show("d", {mode = "n", auto = true})
nnoremap <silent> g√û <Nop>
nnoremap <silent> g <Cmd>lua require("which-key").show("g", {mode = "n", auto = true})
nnoremap <silent> gua√û <Nop>
nnoremap <silent> gui√û <Nop>
nnoremap <silent> gu√û <Nop>
nnoremap <silent> g~a√û <Nop>
nnoremap <silent> g~i√û <Nop>
nnoremap <silent> g~√û <Nop>
nnoremap <silent> gUa√û <Nop>
nnoremap <silent> gUi√û <Nop>
nnoremap <silent> gU√û <Nop>
xnoremap <silent> g√û <Nop>
xnoremap <silent> g <Cmd>lua require("which-key").show("g", {mode = "v", auto = true})
xmap gx <Plug>NetrwBrowseXVis
nmap gx <Plug>NetrwBrowseX
omap <silent> g% <Plug>(MatchitOperationBackward)
xmap <silent> g% <Plug>(MatchitVisualBackward)
nmap <silent> g% <Plug>(MatchitNormalBackward)
xnoremap <silent> i√û <Nop>
xnoremap <silent> i <Cmd>lua require("which-key").show("i", {mode = "v", auto = true})
nnoremap <silent> va√û <Nop>
nnoremap <silent> vi√û <Nop>
nnoremap <silent> v√û <Nop>
nnoremap <silent> v <Cmd>lua require("which-key").show("v", {mode = "n", auto = true})
nnoremap <silent> ya√û <Nop>
nnoremap <silent> yi√û <Nop>
nnoremap <silent> y√û <Nop>
nnoremap <silent> y <Cmd>lua require("which-key").show("y", {mode = "n", auto = true})
vnoremap y ygv
nnoremap <silent> z√û <Nop>
nnoremap <silent> z <Cmd>lua require("which-key").show("z", {mode = "n", auto = true})
nnoremap <silent> zfa√û <Nop>
nnoremap <silent> zfi√û <Nop>
nnoremap <silent> zf√û <Nop>
noremap <C-ScrollWheelDown> :call AdjustFontSize(-1)
noremap <C-ScrollWheelUp> :call AdjustFontSize(1)
noremap <kMinus> :call AdjustFontSize(-1)
noremap <kPlus> :call AdjustFontSize(1)
nnoremap <silent> <C-W>√û <Nop>
nnoremap <silent> <C-W> <Cmd>lua require("which-key").show("\23", {mode = "n", auto = true})
nnoremap <silent> <Plug>(startify-open-buffers) :call startify#open_buffers()
nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_directory(vim.fn.expand("%:p"))
snoremap <silent> <Plug>luasnip-jump-prev <Cmd>lua require'luasnip'.jump(-1)
snoremap <silent> <Plug>luasnip-jump-next <Cmd>lua require'luasnip'.jump(1)
snoremap <silent> <Plug>luasnip-prev-choice <Cmd>lua require'luasnip'.change_choice(-1)
snoremap <silent> <Plug>luasnip-next-choice <Cmd>lua require'luasnip'.change_choice(1)
snoremap <silent> <Plug>luasnip-expand-snippet <Cmd>lua require'luasnip'.expand()
snoremap <silent> <Plug>luasnip-expand-or-jump <Cmd>lua require'luasnip'.expand_or_jump()
noremap <silent> <Plug>luasnip-expand-repeat <Cmd>lua require'luasnip'.expand_repeat()
noremap <silent> <Plug>luasnip-delete-check <Cmd>lua require'luasnip'.unlink_current_if_deleted()
nnoremap <silent> <C-Bslash> <Cmd>execute v:count . "ToggleTerm"
xnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))
xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
onoremap <silent> <Plug>(MatchitOperationMultiForward) :call matchit#MultiMatch("W",  "o")
onoremap <silent> <Plug>(MatchitOperationMultiBackward) :call matchit#MultiMatch("bW", "o")
xnoremap <silent> <Plug>(MatchitVisualMultiForward) :call matchit#MultiMatch("W",  "n")m'gv``
xnoremap <silent> <Plug>(MatchitVisualMultiBackward) :call matchit#MultiMatch("bW", "n")m'gv``
nnoremap <silent> <Plug>(MatchitNormalMultiForward) :call matchit#MultiMatch("W",  "n")
nnoremap <silent> <Plug>(MatchitNormalMultiBackward) :call matchit#MultiMatch("bW", "n")
onoremap <silent> <Plug>(MatchitOperationBackward) :call matchit#Match_wrapper('',0,'o')
onoremap <silent> <Plug>(MatchitOperationForward) :call matchit#Match_wrapper('',1,'o')
xnoremap <silent> <Plug>(MatchitVisualBackward) :call matchit#Match_wrapper('',0,'v')m'gv``
xnoremap <silent> <Plug>(MatchitVisualForward) :call matchit#Match_wrapper('',1,'v'):if col("''") != col("$") | exe ":normal! m'" | endifgv``
nnoremap <silent> <Plug>(MatchitNormalBackward) :call matchit#Match_wrapper('',0,'n')
nnoremap <silent> <Plug>(MatchitNormalForward) :call matchit#Match_wrapper('',1,'n')
smap <silent> <expr> <C-F> luasnip#choice_active() ? '<Plug>luasnip-next-choice' : ''
vnoremap <silent> <C-K> :m '<-2==gv=gv
vnoremap <silent> <C-J> :m '>+1==gv=gv
nnoremap <silent> <C-K> :m .-2==
nnoremap <silent> <C-J> :m .+1==
nnoremap <silent> <C-T> <Cmd>exe v:count1 . "ToggleTerm"
tnoremap <C-[> 
nnoremap <C-L> <Cmd>nohlsearch|diffupdate|normal! 
cnoremap  <Left>
inoremap  <Left>
cnoremap <NL> DOWN
inoremap <NL> DOWN
cnoremap  UP
inoremap  UP
cnoremap  RIGHT
inoremap  RIGHT
inoremap <silent>  <Cmd>lua require("which-key").show("\18", {mode = "i", auto = true})
cnoremap <silent>  <Cmd>lua require("which-key").show("\18", {mode = "c", auto = true})
inoremap <silent>  <Cmd>exe v:count1 . "ToggleTerm"
inoremap  u
inoremap  u
inoremap <silent>  <Cmd>ToggleTerm
let &cpo=s:cpo_save
unlet s:cpo_save
set cindent
set completeopt=menuone,noselect,noinsert,preview
set expandtab
set guicursor=n-v-c-sm:block-blinkon0,i-ci-ve:ver25-Cursor-blinkon500-blinkoff250,r-cr-o:hor20
set guifont=Hack\ NF:h13:l
set helplang=en
set history=2000
set inccommand=split
set matchtime=3
set mouse=a
set runtimepath=~\\.config\\nvim,~\\AppData\\Local\\nvim-data\\site,~\\AppData\\Local\\nvim-data\\site\\pack\\packer\\opt\\nvim-treesitter-textobjects,~\\AppData\\Local\\nvim-data\\site\\pack\\packer\\start\\nvim-treesitter,~\\AppData\\Local\\nvim-data\\site\\pack\\packer\\opt\\telescope-fzf-native.nvim,~\\AppData\\Local\\nvim-data\\site\\pack\\packer\\start\\packer.nvim,C:\\tools\\neovim\\nvim-win64\\share\\nvim\\runtime,C:\\tools\\neovim\\nvim-win64\\share\\nvim\\runtime\\pack\\dist\\opt\\matchit,C:\\tools\\neovim\\nvim-win64\\lib\\nvim,~\\AppData\\Local\\nvim-data\\site/pack/*/start/*,~\\AppData\\Local\\nvim-data\\site/pack/*/start/*\\after,~\\AppData\\Local\\nvim-data\\site\\after,~\\.config\\nvim\\after,C:/tools/neovim/nvim-win64/bin/../share/nvim-qt/runtime
set scrolloff=4
set shiftwidth=2
set shortmess=cnOfiolTFxtI
set showmatch
set showtabline=2
set smartcase
set smartindent
set softtabstop=2
set spelllang=en_gb
set splitbelow
set splitright
set statusline=%#Normal#
set noswapfile
set tabline=%!TabbyTabline()
set tabstop=2
set termguicolors
set timeoutlen=500
set title
set undodir=~\\.config\\nvim/undo
set undofile
set wildignore=*.swp
set wildmode=
set window=49
" vim: set ft=vim :
